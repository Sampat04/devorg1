@isTest
public class AnimalsTest {
	@isTest
    static void testAnimals(){
        /*Test.setMock(HttpCalloutMock.class, new AnimalsCalloutMock());
        
        Object objInst = Animals.animals();
        system.debug('line 8 : '+objInst);
        //system.debug('line 9 : '+objInst.serialize());
        
        Map<String, String> meta = (Map<String, String>) JSON.deserializeUntyped(objInst.serialize().deserializeUntyped());
		system.debug(meta);
        
        Animals.ReturnWrapper rwInst = Animals.animals();
        system.debug('line 8 in AnimalsTest : '+rwInst);
        system.debug('line 9 : '+rwInst.resp1);
        
        HttpResponse res = rwInst.resp1;
        system.debug('line 12 : '+res.getHeaderKeys());
        

        String expected = '{"Animals":["Horse","Dog","Tiger","Lion","Cat","Mouse"]}' ;
        
        System.assertEquals(200,res.getStatusCode());
        System.assertEquals(res.getBody(), expected);*/
    }
}

        //system.debug(response.get('chessString'));
        //system.debug(response.get('responseHttp').getBody());